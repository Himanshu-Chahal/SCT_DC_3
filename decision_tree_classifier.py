
"""Decision_tree_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A1NJoXsfX4evJN4P-nvuumw8AYC4kFXd
"""




# Decision Tree Classifier for Bank Marketing Dataset


import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load dataset
file_path = '/content/bank-full.csv'

data = pd.read_csv(file_path, sep=";", quotechar='"')

# Explore data
print("First 5 rows of the dataset:")
print(data.head())

print("\nDataset information:")
print(data.info())

print("\nSummary statistics:")
print(data.describe())

print("\nMissing values in each column:")
print(data.isnull().sum())

# Encode categorical variables
categorical_cols = ['job', 'marital', 'education', 'default', 'housing',
                    'loan', 'contact', 'month', 'poutcome']

data = pd.get_dummies(data, columns=categorical_cols, drop_first=True)

# Encode target variable
data['y'] = data['y'].map({'no': 0, 'yes': 1})

print("\nData after encoding (first 5 rows):")
print(data.head())

# Split data into features and target
X = data.drop('y', axis=1)
y = data['y']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

print(f"\nTraining set shape: {X_train.shape}")
print(f"Test set shape: {X_test.shape}")

# Initialize and train Decision Tree classifier
dt = DecisionTreeClassifier(criterion='gini', max_depth=5, random_state=42)
dt.fit(X_train, y_train)

# Predict on test set
y_pred = dt.predict(X_test)

# Evaluate the model
print(f"\nAccuracy: {accuracy_score(y_test, y_pred):.2f}")
print("\nClassification report:")
print(classification_report(y_test, y_pred))
print("Confusion matrix:")
print(confusion_matrix(y_test, y_pred))

# Visualize the decision tree
plt.figure(figsize=(20, 10))
plot_tree(dt, feature_names=X.columns, class_names=['No', 'Yes'], filled=True, rounded=True)
plt.title("Decision Tree Visualization")
plt.show()

# Hyperparameter tuning using GridSearchCV
param_grid = {
    'max_depth': [3, 5, 7, 10],
    'min_samples_split': [2, 5, 10],
    'criterion': ['gini', 'entropy']
}

grid_search = GridSearchCV(DecisionTreeClassifier(random_state=42), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

print("\nBest parameters from GridSearchCV:")
print(grid_search.best_params_)

# Use the best model
best_dt = grid_search.best_estimator_

# Example new customer data
new_customer_data = {
    'age': [35],
    'balance': [5000],
    'duration': [120],
    'campaign': [2],
    'pdays': [-1],
    'previous': [0]
}

# Add missing columns with default value 0
for col in X.columns:
    if col not in new_customer_data:
        new_customer_data[col] = [0]

# Create DataFrame and reorder columns to match training data
new_customer = pd.DataFrame(new_customer_data)
new_customer = new_customer[X.columns]

# Predict for the new customer
prediction = best_dt.predict(new_customer)
print("\nPrediction for new customer:", "Yes" if prediction[0] == 1 else "No")
